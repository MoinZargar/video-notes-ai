// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int    @id @default(autoincrement())
  email         String    @unique
  name          String?
  password      String?   
  provider      Provider?
  isOAuthUser   Boolean   @default(false)
  subscription  Subscription?
  courses       Course[]
  notes         Notes[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([email])
}

model Subscription {
  id            Int             @id @default(autoincrement())
  userId        Int             @unique
  planId        Int
  customerId    String?   @unique
  status        SubscriptionStatus @default(free)
  startDate     DateTime        @default(now())
  endDate       DateTime?
  canceledAt    DateTime?
  plan          Plan             @relation(fields: [planId], references: [id])
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  dailyUsage    DailyUsage[]
  
  @@index([userId])
}

model Plan {
  id              Int       @id @default(autoincrement()) 
  name            PlanType  @unique
  price           Int       
  planId          String    @unique 
  subscription    Subscription[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model DailyUsage {
  id         Int      @id @default(autoincrement())
  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  date       DateTime @default(now())
  videoCount Int      @default(0)
  pdfCount   Int      @default(0)
  chatCount  Int      @default(0)
   
  @@unique([subscriptionId, date])
  @@index([subscriptionId])
}


model Course {
  id            Int    @id @default(autoincrement())
  name          String 
  description   String?
  userId        Int
  notes         Notes[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId]) 
  @@unique([name, userId])
}

model Notes {
  id            Int    @id @default(autoincrement()) @unique
  videoUrl      String?
  content       String
  source        SourceType 
  courseId      Int
  userId        Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([courseId]) 
  @@index([userId])  
}

enum SourceType {
  video
  pdf
}
enum Provider {
    CREDENTIALS
    GOOGLE
    GITHUB
}

enum PlanType {
  BASIC
  MONTLY
  YEARLY
}

enum SubscriptionStatus {
  created
  authenticated
  active
  pending
  halted
  cancelled
  completed
  expired
  free
}